How did viewing a diff between two versions of a file help you see the bug that was introduced?

To see the diff between files pointed me to the only possible causes of the bugs, instead of having me scan the whole document.
It filters down the possible candidates.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

You could realize which changes led you to bugs or difference in performance.
You would spend less resources on saving files, and also be more organized without having multiple files.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
If you commit manually, your commits have a logical reason to be, and can be used for telling a story of the code, ando to analyze the impact of one change at a time.
If you have automatic changes, you will have to look at all the random commits to find the version that you are interested in.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because Git is mostly meant for projects, not only files. It's better for software development.

How can you use the commands git log and git diff to view the history of files?

'git log' shows every commit and the comments of the changes made
'git diff commitA commitB' shows all the differences between commmits A and B.

How might using version control make you more confident to make changes that could break something?

Because you can always go back in time! You have a ctrl+z for any code.

Now that you have your workspace set up, what do you want to try using Git for?

I want to use it for DS projects, mainly. For everything that evolves in time.
